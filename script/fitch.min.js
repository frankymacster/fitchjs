var FW=20,LH=30,NW=30,OS=LH/6,RC=30;function draw(){var e="100%",t=LH;if(PROOF.length>0){var r=d3.max(PROOF,function(e){return e.rul=="Premise"?e.cnt:0});t=PROOF.length*LH}var n=d3.select("#drv").attr("width",e).attr("height",t);var i=n.selectAll("g").data(PROOF);var l=i.enter().append("g").attr("transform",function(e,t){return"translate(0,"+t*LH+")"});l.each(function(e,t){var n=d3.select(this);var i=e.rul=="Premise"&&e.cnt==r;if(e.rul=="Assumption"||i||e.rul=="Flag"){for(var t=0;t<e.dth-1;t++){n.append("path").attr("d",function(e){return"M"+(t*FW+NW)+" 0 V "+LH})}var l=(e.dth-1)*FW+NW;n.append("path").attr("d",function(e){return"M"+l+" "+(i?0:1.6*OS)+" V "+LH});n.append("path").attr("d",function(e){return"M"+l+" "+LH+" H "+(l+10)})}else{for(var t=0;t<=e.dth-1;t++){n.append("path").attr("d",function(e){return"M"+(t*FW+NW)+" 0 V "+LH})}}});l.append("text").attr("x","0").attr("y",""+(LH-OS)).text(function(e){return e.cnt});l.append("text").attr("x",function(e){return NW+FW*(e.dth>1?e.dth-1:0)+(e.dth>0?OS:0)}).attr("y",""+(LH-OS)).attr("class","dfrm").attr("id",function(e){return"frm"+e.cnt}).text(function(e){return padBCs(richardify(e.frm))});l.append("text").attr("class","drul").text(function(e){return linD(e.lin)+" "+gRul(e.rul)});l.append("text").attr("class","del");i.exit().remove();if(PROOF.length){var a=d3.max(d3.selectAll(".dfrm")[0],function(e){var t=d3.select(e);var r=t.node().getBBox();return r["width"]+r["x"]});d3.selectAll(".drul").attr("x",a+RC).attr("y",LH-OS);var o=d3.max(d3.selectAll(".drul")[0],function(e){var t=d3.select(e);var r=t.node().getBBox();return r["width"]+r["x"]});d3.selectAll(".del").attr("x",o+FW).attr("y",LH-OS).html(function(e){return e.cnt>r&&e.cnt==PROOF.length?"&#x2717":""}).on("click",function(){clrlast()})}}function draw_goals(){var e="100%",t=0;if(GOALS.length){t=GOALS.length*LH}var r=d3.select("#gls").attr("width",e).attr("height",t);var n=r.selectAll("g").data(GOALS);n.select(".glfrm").text(function(e){return padBCs(richardify(e))});var i=n.enter().append("g");i.attr("transform",function(e,t){return"translate(0,"+t*LH+")"});i.append("text").attr("x",0).attr("y",""+(LH-OS)).attr("class","gllbl").text("Goal:");i.append("text").attr("class","glfrm").text(function(e){return richardify(e)});i.append("text").attr("class","gdel");n.exit().remove();if(CONCLUSION.length){var l=d3.select("#conlbl").node().getBBox();var a=l["width"];d3.selectAll(".glfrm").attr("x",a+10).attr("y",LH-OS)}var o=d3.max(d3.selectAll(".glfrm")[0],function(e){var t=d3.select(e);var r=t.node().getBBox();return r["width"]+r["x"]});d3.selectAll(".gdel").attr("x",o+FW).attr("y",LH-OS).html(function(e,t){return t==0?"&#x2717":""}).on("click",function(){delete_goal()})}function draw_conclusion(){var e=d3.select("#con").attr("width","100%").attr("height",LH);var t=e.selectAll("g").data(CONCLUSION);t.enter().append("g").attr("transform","translate(0,0)").attr("id","g");t.append("text").attr("x",0).attr("y",""+(LH-OS)).attr("id","conlbl").text("Conclusion:");t.append("text").attr("id","confrm").text(function(e){return padBCs(richardify(e))});t.exit().remove();if(CONCLUSION.length){var r=d3.select("#conlbl").node().getBBox();var n=r["width"];d3.select("#confrm").attr("x",10+n).attr("y",LH-OS)}}function unparse(e){if(e.length==2&&(isQ(e[0])||isU(e[0]))){return e[0]+unparse(e[1])}if(e.length==3&&isB(e[1])){return"("+unparse(e[0])+e[1]+unparse(e[2])+")"}else{return e.join("")}}function parse(e){if(e==""){return[]}var t=[];var r=[];if(isQ(e)){t=parse(e.substring(4));return t.length?[e.substring(0,4),t]:[]}if(isU(e[0])){t=parse(e.substring(1));return t.length?[e[0],t]:[]}if(e[0]=="("&&e[e.length-1]==")"){var n=gSub(e);if(n.indexOf(undefined)>=0||n.indexOf("")>=0){return[]}else{t=parse(n[0]);r=parse(n[2]);if(t.length&&r.length){return[t,n[1],r]}else{return[]}}}else{return isA(e)?e.split(""):[]}}function isA(e){var t="ABCDEFGHIJKLMNOPQRSTUVWXYZ";if(e.length==1&&isAbs(e)){return true}if(e.length==3&&isT(e[0])&&e[1]=="="&&isT(e[2])){return true}if(t.indexOf(e[0])>=0){if(e.length==1){return true}else{for(var r=1;r<e.length;r++){if(!isT(e[r])){return false}}return true}}else{return false}}function isAbs(e){var t=["#","⊥"];return t.indexOf(e)>=0}function isQ(e){var t=["E","A","∃","∀"];if(e[0]=="("&&t.indexOf(e[1])>=0&&isV(e[2])&&e[3]==")"){return true}else{return false}}function isU(e){var t=["~","¬"];for(var r=0;r<t.length;r++){if(e.indexOf(t[r])==0){return true}}return false}function gSub(e){var t=[];var r=0;for(var n=0;n<e.length;n++){if(e[n]=="("){t.push("(")}else if(e[n]==")"&&t.length>0){t.pop()}else if(t.length==1&&(r=isB(e.substring(n)))>0){return[e.substring(1,n),e.substring(n,n+r),e.substring(n+r,e.length-1)]}}return[undefined,undefined,undefined]}function isB(e){var t=["&","v",">","<>","∧","∨","⊃","≡"];for(var r=0;r<t.length;r++){if(e.indexOf(t[r])==0){return t[r].length}}return 0}function isT(e){return isC(e)||isV(e)}function isV(e){var t="abcdefghijklmnopqrstuwxyz";return t.indexOf(e)>=0}function isC(e){var t="abcdefghijklmnopqrstuwxyz";return t.indexOf(e)>=0}function richardify(e){if(e==""){return e}else if(isQ(e)){return e[0]+ptou(e[1])+e[2]+e[3]+richardify(e.substring(4,e.length))}else if(isU(e[0])){return ptou(e[0])+richardify(e.substring(1,e.length))}else if(e[0]=="("&&e[e.length-1]==")"){var t=gSub(e);return"("+richardify(t[0])+ptou(t[1])+richardify(t[2])+")"}else if(isAbs(e)){return ptou(e)}else{return e}}function latexify(e){var t="";var r="";for(var n=0;n<e.length;n++){r=utox(e[n]);if(r!=e[n]){r+=" "}t+=r}return t}function gRul(e){var t="";var r="";for(var n=0;n<e.length;n++){if(e[n]=="<"){r=ptou(e[n]+e[n+1]);n++}else if(e[n]=="E"||e[n]=="A"){r=n==0&&e.length==2?ptou(e[n]):e[n]}else{r=ptou(e[n])}t+=r}return t}function ptou(e){switch(e){case"v":return"∨";case"∨":return"v";case">":return"⊃";case"⊃":return">";case"<>":return"≡";case"≡":return"<>";case"#":return"⊥";case"⊥":return"#";case"A":return"∀";case"∀":return"A";case"E":return"∃";case"∃":return"E";default:return e}}function utox(e){switch(e){case"~":return"\\sim";case"&":return"\\&";case"∨":return"\\lor";case"→":return"\\supset";case"↔":return"\\equiv";case"⊥":return"\\bot";case"∀":return"\\forall";case"∃":return"\\exists";default:return e}}function padBCs(e){var t="";var r=0;for(var n=0;n<e.length;n++){r=isB(e.substring(n));if(r==1){t=t+" "+e[n]+" "}else if(r==2){t=t+" "+e[n]+e[n+1]+" ";n=n+1}else{t=t+e[n]}}return t}function fillND(e){if(!PROOF.length){throw"[ERROR]: cannot begin a proof using "+gRul(e.rul)+"."}e.sig=PROOF[e.cnt-2].sig.slice(0);e.dth=e.sig.length;e.avl=PROOF[e.cnt-2].avl.slice(0).concat(e.cnt-1);e.frv=freeVars(e.tr)}function fillD(e,t){if(!PROOF.length){throw"[ERROR]: cannot begin a proof using "+gRul(e.rul)+"."}if(t==e.cnt-1){e.sig=PROOF[t-1].sig.slice(0,PROOF[t-1].sig.length-1)}else{e.sig=PROOF[e.cnt-2].sig.slice(0)}e.dth=e.sig.length;e.avl=gtAvl(e);e.frv=freeVars(e.tr)}function gtAvl(e){var t=[];for(var r=0;r<PROOF.length;r++){if(subset(PROOF[r].sig,e.sig)){t.push(r+1)}}return t}function areAvl(e,t){for(var r=0;r<e.length;r++){if(t.indexOf(e[r])<0){return e[r]}}return-1}function subset(e,t){if(e.length>t.length){return false}for(var r=0;r<e.length;r++){if(t.indexOf(e[r])<0){return false}}return true}function same(e,t){if(e.length!=t.length){return false}for(var r=0;r<e.length;r++){if(e[r]!=t[r]){return false}}return true}function frvList(e){var t=[];for(var r=0;r<e.length;r++){t=t.concat(PROOF[e[r]-1].frv)}return t}function isInst(e,t){var r=mkTmp(e);var n=blockedVars(r);var i=unparse(r);if(i.length!=t.length){return"_"}if(i.indexOf("_")<0){return"_"}var l=t[i.indexOf("_")];if(n.indexOf(l)>=0){return"_"}return t==i.replace(/_/g,l)?l:"_"}function mkTmp(e){var t=e[0][2];return r(e[1]);function r(e){if(e.length==2&&isQ(e[0])){if(e[0][2]==t){return[e[0],e[1]]}else{return[e[0],r(e[1])]}}else if(e.length==2&&isU(e[0])){return[e[0],r(e[1])]}else if(e.length==3&&isB(e[1])){return[r(e[0]),e[1],r(e[2])]}else{return n(t,e)}}function n(e,t){var r=[];for(var n=0;n<t.length;n++){if(t[n]==e){r.push("_")}else{r.push(t[n])}}return r}}function freeVars(e){function t(e,r){if(e.length==2&&isQ(e[0])){r.push(e[0][2]);return t(e[1],r)}else if(e.length==2&&isU(e[0])){return t(e[1],r)}else if(e.length==3&&isB(e[1])){return t(e[0],r).concat(t(e[2],r))}else{var n=[];for(var i=0;i<e.length;i++){if(isV(e[i])&&r.indexOf(e[i])<0){n.push(e[i])}}return n}}return t(e,[])}function checkID(e,t,r){var n=unparse(t);if(r==n){return false}if(r.length!=n.length){return false}var i=[e[0],e[2]];function l(e,t){if(e.length==2&&isQ(e[0])){t.push(e[0][2]);return e[0]+l(e[1],t)}else if(e.length==2&&isU(e[0])){return e[0]+l(e[1],t)}else if(e.length==3&&isB(e[1])){return"("+l(e[0],t)+e[1]+l(e[2],t)+")"}else{var r="";for(var n=0;n<e.length;n++){if(e[n]==i[0]&&t.indexOf(e[n])<0){r=r+"_"}else{r=r+e[n]}}return r}}var a=l(t,[]);if(a.indexOf("_")==-1){return false}for(var o=0;o<a.length;o++){if(a[o]=="_"){if(r[o]!=i[0]&&r[o]!=i[1]){return false}}else if(a[o]!=r[o]){return false}}return true}function isAV(e,t,r){if(t.length!=r.length){return false}var n=mkAVList(e);var i="";for(var l=0;l<n.length;l++){i=r[n[l][1].indexOf("_")];if(r==n[l][1].replace(/_/g,i)&&n[l][0].indexOf(i)<0){return true}}return false}function mkAVList(e){var t=getQLoc(e);var r=[];var n="";var i=[];for(var l=0;l<t.length;l++){n=mkAVtmp(getTreeAt(e,t[l]));i=blockedVars(n[1]).concat(freeVars(n[1]));n=insertTmp(e,strAVtmp(n),t[l]);r.push([i,n])}return r}function getQLoc(e){var t=[];r(e,[]);return t;function r(e,n){if(e.length==2&&isQ(e[0])){t.push(n.slice(0));n.push(1);r(e[1],n.slice(0))}else if(e.length==2&&isU(e[0])){n.push(1);r(e[1],n.slice(0))}else if(e.length==3&&isB(e[1])){n.push(0);r(e[0],n.slice(0));n.pop();n.push(2);r(e[2],n.slice(0))}}}function mkAVtmp(e){return["("+e[0][1]+"_"+")",mkTmp(e)]}function strAVtmp(e){return e[0]+unparse(e[1])}function getTreeAt(e,t){for(var r=0;r<t.length;r++){e=e[t[r]]}return e}function blockedVars(e){blocked=[];t(e);return blocked;function t(e){if(e.length==2&&isQ(e[0])){if(r(e[1])){blocked.push(e[0][2])}}else if(e.length==2&&isU(e[0])){t(e[1])}else if(e.length==3&&isB(e[1])){t(e[0]);t(e[2])}}function r(e){test=false;for(var t=0;t<e.length;t++){if(e[t]instanceof Array){test=test||r(e[t])}else{test=test||e[t]=="_"}}return test}}function insertTmp(e,t,r){return n(e,[]);function n(e,l){if(i(l,r)){return t}if(e.length==2&&(isQ(e[0])||isU(e[0]))){return e[0]+n(e[1],l.concat([1]))}if(e.length==3&&isB(e[1])){return"("+n(e[0],l.concat([0]))+e[1]+n(e[2],l.concat([2]))+")"}else{return e.join("")}}function i(e,t){if(e.length!=t.length){return false}for(var r=0;r<e.length;r++){if(e[r]!=t[r]){return false}}return true}}function lastline(e){var t=-1;for(var r=PROOF.length-1;r>=0;r--){if(same(e,PROOF[r].sig)){return r+1}}console.log(t);return t}function ckPR(e,t){var r="[ERROR applying Premise rule]: ";if(t==0){e.sig=[1];e.dth=e.sig.length;e.avl=gtAvl(e);e.frv=freeVars(e.tr)}if(e.lin.length>0){throw r+"Premise rule can't be applied to any lines."}for(var n=0;n<e.cnt-1;n++){if(PROOF[n].rul!="Premise"){throw r+"Premises must be entered as the first lines of the proof."}}}function ckAS(e,t){var r="[ERROR applying Assumption rule]: ";var r=e.sig;if(t==0){if(!PROOF.length){e.sig=[e.cnt]}else{if(r[0]=="+"){e.sig=PROOF[e.cnt-2].sig.concat([e.cnt])}else{e.sig=PROOF[e.cnt-2].sig.slice(0,PROOF[e.cnt-2].sig.length-1).concat([e.cnt])}}e.dth=e.sig.length;e.avl=gtAvl(e);e.frv=freeVars(e.tr)}if(e.lin.length>0){throw r+"Assumption rule can't be applied to any lines."}}function ckRE(e,t){var r="[ERROR applying "+gRul(e.rul)+" to lines "+e.lin.join(",")+"]: ";if(t==0){fillND(e)}if(e.lin.length!=1){throw r+"Rule must be applied to one line."}if(e.frm!=PROOF[e.lin[0]-1].frm){throw r+"The formula being derived must be the same as the formula on the rule line."}var n=areAvl(e.lin,e.avl);if(n>=0){throw r+"Line "+n+" is not available at this stage of the proof.  The following lines are available: "+e.avl.join(",")}}function ckCJI(e,t){var r="[ERROR applying "+gRul(e.rul)+" to lines "+e.lin.join(",")+"]: ";if(t==0){fillND(e)}if(e.lin.length!=2){throw r+"Rule must be applied to two lines."}if(e.tr.length!=3||e.tr[1]!="&"){throw r+"The formula being derived must be a conjunction."}if(!(e.frm=="("+PROOF[e.lin[0]-1].frm+"&"+PROOF[e.lin[1]-1].frm+")")&&!(e.frm=="("+PROOF[e.lin[1]-1].frm+"&"+PROOF[e.lin[0]-1].frm+")")){throw r+"The formulas on lines "+e.lin[0]+" and "+e.lin[1]+" must be the conjuncts of the formula being derived."}var n=areAvl(e.lin,e.avl);if(n>=0){throw r+"Rule line "+n+" is not available at this stage of the proof.  The following lines are available: "+e.avl.join(",")}}function ckCJE(e,t){var r="[ERROR applying "+gRul(e.rul)+" to line "+e.lin.join(",")+"]: ";if(t==0){fillND(e)}if(e.lin.length!=1){throw r+"Rule must be applied to one line."}if(PROOF[e.lin[0]-1].tr.length!=3||PROOF[e.lin[0]-1].tr[1]!="&"){throw r+"The formula on line "+e.lin[0]+" must be a conjunction."}if(!(e.frm==unparse(PROOF[e.lin[0]-1].tr[0]))&&!(e.frm==unparse(PROOF[e.lin[0]-1].tr[2]))){throw r+"The formula being derived must be one of the conjuncts of the formula on line "+e.lin[0]+"."}var n=areAvl(e.lin,e.avl);if(n>=0){throw r+"Rule line "+n+" is not available at this stage of the proof.  The following lines are available: "+e.avl.join(",")}}function ckCNI(e,t){var r="[ERROR applying "+gRul(e.rul)+" to lines "+linD(e.lin)+"]: ";if(e.lin.length!=3||e.lin[1]!="-"){throw r+'Rule must be applied to one subproof (citation of the form "j-k").'}var n=e.lin[0],i=e.lin[2];if(PROOF[n-1].rul!="Assumption"){throw r+"The first rule line must be an assumption."}if(!same(PROOF[n-1].sig,PROOF[i-1].sig)){throw r+"The two rule lines must be in the same subproof."}var l=lastline(PROOF[n-1].sig);if(l!=i){throw r+"The second rule line must be the last line of the subproof beginning with the assumption line "+n+"."}if(e.tr.length!=3||e.tr[1]!=">"){throw r+"The formula being derived must be a conditional."}if(PROOF[n-1].frm!=unparse(e.tr[0])){throw r+"The assumption on the first rule line must be the antecedent of the conditional being derived."}if(PROOF[i-1].frm!=unparse(e.tr[2])){throw r+"The second rule line must be the consequent of the conditional being derived."}if(t==0){fillD(e,i)}if(!same(e.sig,PROOF[i-1].sig.slice(0,PROOF[i-1].sig.length-1))){throw r+"The subproof "+linD(e.lin)+" you are citing is not available at this stage in the proof."}}function ckCNE(e,t){var r="[ERROR applying "+gRul(e.rul)+" to lines "+e.lin.join(",")+"]: ";if(t==0){fillND(e)}if(e.lin.length!=2){throw r+"Rule must be applied to two lines."}if(PROOF[e.lin[0]-1].tr.length!=3||PROOF[e.lin[0]-1].tr[1]!=">"){throw r+"The first rule line must be a conditional."}if(PROOF[e.lin[1]-1].frm!=unparse(PROOF[e.lin[0]-1].tr[0])){throw r+"The second rule line must be the antecedent of the conditional on the first rule line."}if(e.frm!=unparse(PROOF[e.lin[0]-1].tr[2])){throw r+"The formula being derived must be the consequent of the conditional on the first rule line."}var n=areAvl(e.lin,e.avl);if(n>=0){throw r+"Rule line "+n+" is not available at this stage of the proof.  The following lines are available: "+e.avl.join(",")}}function ckDJI(e,t){var r="[ERROR applying "+gRul(e.rul)+" to line "+e.lin.join(",")+"]: ";if(t==0){fillND(e)}if(e.lin.length!=1){throw r+"Rule must be applied to one line"}if(e.tr.length!=3||e.tr[1]!="v"){throw r+"The formula being derived must be a disjunction."}if(!(unparse(e.tr[0])==PROOF[e.lin[0]-1].frm)&&!(unparse(e.tr[2])==PROOF[e.lin[0]-1].frm)){throw r+"The formula on line "+e[0]+" must be a disjunct of the formula being derived."}var n=areAvl(e.lin,e.avl);if(n>=0){throw r+"Rule line "+n+" is not available at this stage of the proof.  The following lines are available: "+a.join(",")}}function ckDJE(e,t){var r="[ERROR applying "+gRul(e.rul)+" to lines "+linD(e.lin)+"]: ";if(e.lin.length!=7||e.lin[2]!="-"||e.lin[5]!="-"){throw r+'Rule must be applied to a disjunction line and a pair of subproofs (with subproof citations of the form "j-k").'}var n=e.lin[0],i=e.lin[1],l=e.lin[3],a=e.lin[4],o=e.lin[6];if(PROOF[n-1].tr[1]!="v"){throw r+"The first rule line must be a disjunction."}if(PROOF[i-1].rul!="Assumption"||PROOF[a-1].rul!="Assumption"){throw r+"The second and fourth rule lines must be assumptions."}if(!same(PROOF[i-1].sig,PROOF[l-1].sig)){throw r+"The second and third rule lines must be in the same subproof."}if(!same(PROOF[a-1].sig,PROOF[o-1].sig)){throw r+"The fourth and fifth rule lines must be in the same subproof."}var s=lastline(PROOF[i-1].sig);if(s!=l){throw r+"The third rule line must be the last line of the subproof beginning with the assumption "+i+"."}s=lastline(PROOF[a-1].sig);if(s!=o){throw r+"The fifth rule line must be the last line of the subproof beginning with the assumption "+a+"."}if(PROOF[i-1].frm!=unparse(PROOF[n-1].tr[0])){throw r+"The second rule line should be the left disjunct of "+PROOF[n-1].frm+"."}if(PROOF[a-1].frm!=unparse(PROOF[n-1].tr[2])){throw r+"The fourth rule line should be the right disjunct of "+PROOF[n-1].frm+"."}if(PROOF[l-1].frm!=e.frm||PROOF[o-1].frm!=e.frm){throw r+"The third and fifth rule lines must match the formula being derived."}if(t==0){fillD(e,o)}if(!same(e.sig,PROOF[l-1].sig.slice(0,PROOF[l-1].sig.length-1))){throw r+"The first subproof you are citing is not available at this stage in the proof."}if(!same(e.sig,PROOF[o-1].sig.slice(0,PROOF[o-1].sig.length-1))){throw r+"The second subproof you are citing is not available at this stage in the proof."}var f=areAvl([n],e.avl);if(f>=0){throw r+"Rule line "+f+" is not available at this stage of the proof.  The following lines are available: "+e.avl.join(",")}}function ckNI(e,t){var r="[ERROR applying "+gRul(e.rul)+" to lines "+linD(e.lin)+"]: ";if(e.lin.length!=3||e.lin[1]!="-"){throw r+'Rule must be applied to one subproof (citation of the form "j-k").'}var n=e.lin[0],i=e.lin[2];if(PROOF[n-1].rul!="Assumption"){throw r+"The first rule line must be an assumption."}if(!same(PROOF[n-1].sig,PROOF[i-1].sig)){throw r+"The two rule lines must be in the same subproof."}var l=lastline(PROOF[n-1].sig);if(l!=i){throw r+"The second rule line must be the last line of the subproof beginning with assumption "+n+"."}if(PROOF[i-1].frm!="#"){throw r+"The second rule line must be the absurdity."}if(e.frm!="~"+PROOF[n-1].frm){throw r+"The formula being derived must be the negation of the assumption on the first rule line."}if(t==0){fillD(e,i)}if(!same(e.sig,PROOF[i-1].sig.slice(0,PROOF[i-1].sig.length-1))){throw r+"The subproof "+linD(e.lin)+" you are citing is not available at this stage in the proof."}}function ckNE(e,t){var r="[ERROR applying "+gRul(e.rul)+" to lines "+e.lin.join(",")+"]: ";if(t==0){fillND(e)}if(e.lin.length!=2){throw r+"Rule must be applied to two lines."}if(e.frm!="#"){throw r+"The formula being derived must be the absurdity, #."}if(PROOF[e.lin[0]-1].frm!="~"+PROOF[e.lin[1]-1].frm&&"~"+PROOF[e.lin[0]-1].frm!=PROOF[e.lin[1]-1].frm){throw r+"One of lines "+e.lin[0]+" or "+e.lin[1]+" must be the negation of the other."}x=areAvl(e.lin,e.avl);if(x>=0){throw r+"Rule line "+x+" is not available at this stage of the proof.  The following lines are available: "+e.avl.join(",")}}function ckDN(e,t){var r="[ERROR applying DN to line "+e.lin.join(",")+"]: ";if(t==0){fillND(e)}if(e.lin.length!=1){throw r+"Rule must be applied to one line."}if(!(PROOF[e.lin[0]-1].frm.length>2)||PROOF[e.lin[0]-1].frm.substr(0,2)!="~~"||e.frm!=PROOF[e.lin[0]-1].frm.substring(2)){throw r+"Formula on line "+e.lin[0]+" must be the double negation of the formula being derived."}x=areAvl(e.lin,e.avl);if(x>=0){throw r+"Rule line "+x+" is not available at this stage of the proof.  The following lines are available: "+e.avl.join(",")}}function ckEFQ(e,t){var r="[ERROR applying EFQ to line "+e.lin.join(",")+"]: ";if(t==0){fillND(e)}if(e.lin.length!=1){throw r+"Rule must be applied to one line."}if(PROOF[e.lin[0]-1].frm!="#"){throw r+"Formula on line "+e.lin[0]+" must be the absurdity."}x=areAvl(e.lin,e.avl);if(x>=0){throw r+"Rule line "+x+" is not available at this stage of the proof.  The following lines are available: "+e.avl.join(",")}}function ckBCI(e,t){var r="[ERROR applying "+gRul(e.rul)+" to lines "+linD(e.lin)+"]: ";if(e.lin.length!=6||e.lin[1]!="-"||e.lin[4]!="-"){throw r+'Rule must be applied to two subproofs (citations of the form "j-k").'}if(e.tr.length!=3||e.tr[1]!="<>"){throw r+"The formula being derived must be a biconditional."}var n=e.lin[0],i=e.lin[2],l=e.lin[3],a=e.lin[5];if(PROOF[n-1].rul!="Assumption"||PROOF[l-1].rul!="Assumption"){throw r+"The first and third rule lines must be assumptions."}if(!same(PROOF[n-1].sig,PROOF[i-1].sig)){throw r+"The first and second rule lines must be in the same subproof."}if(!same(PROOF[l-1].sig,PROOF[a-1].sig)){throw r+"The third and fourth rule lines must be in the same subproof."}var o=lastline(PROOF[n-1].sig);if(o!=i){throw r+"The second rule line must be the last line of the subproof beginning with the assumption "+n+"."}o=lastline(PROOF[l-1].sig);if(o!=a){throw r+"The fourth rule line must be the last line of the subproof beginning with the assumption "+l+"."}if(PROOF[n-1].frm!=PROOF[a-1].frm||PROOF[i-1].frm!=PROOF[l-1].frm){throw r+"The formula on the first rule line must match the one on the fourth, and the one on the second must match the one on the third."}if(e.frm!="("+PROOF[n-1].frm+"<>"+PROOF[i-1].frm+")"&&e.frm!="("+PROOF[i-1].frm+"<>"+PROOF[n-1].frm+")"){throw r+"The biconditional being derived must be composed of the formulas on the rule lines."}if(t==0){fillD(e,a)}if(!same(e.sig,PROOF[i-1].sig.slice(0,PROOF[i-1].sig.length-1))){throw r+"The first subproof you are citing is not available at this stage in the proof."}if(!same(e.sig,PROOF[a-1].sig.slice(0,PROOF[a-1].sig.length-1))){throw r+"The second subproof you are citing is not available at this stage in the proof."}}function ckBCE(e,t){var r="[ERROR applying "+gRul(e.rul)+" to lines "+e.lin.join(",")+"]: ";if(t==0){fillND(e)}if(e.lin.length!=2){throw r+"Rule must be applied to two lines."}if(PROOF[e.lin[0]-1].tr.length!=3||PROOF[e.lin[0]-1].tr[1]!="<>"){throw r+"The formula on the first rule line must be a biconditional."}if("("+PROOF[e.lin[1]-1].frm+"<>"+e.frm+")"!=PROOF[e.lin[0]-1].frm&&"("+e.frm+"<>"+PROOF[e.lin[1]-1].frm+")"!=PROOF[e.lin[0]-1].frm){throw r+"The formula being derived must be one side of the biconditional on the first rule line, and the formula on the second rule line the other side of it."}var n=areAvl(e.lin,e.avl);if(n>=0){throw r+"Rule line "+n+" is not available at this stage of the proof.  The following lines are available: "+e.avl.join(",")}}function ckFLG(e,t){var r="[ERROR applying Flag rule]: ";if(t==0){if(!PROOF.length){e.sig=[e.cnt]}else{e.sig=PROOF[e.cnt-2].sig.concat([e.cnt])}e.dth=e.sig.length;e.avl=gtAvl(e);e.frv=[e.frm]}var n=frvList(e.avl);if(n.indexOf(e.frm)>=0){throw r+"The flagged term "+e.frm+" already occurs in an available line."}}function ckAI(e,t){var r="[ERROR applying "+gRul(e.rul)+" to lines "+linD(e.lin)+"]: ";if(t==0){if(!PROOF.length){throw"[ERROR]: cannot begin a proof using "+gRul(e.rul)+"."}e.sig=PROOF[e.cnt-2].sig.slice(0,PROOF[e.cnt-2].sig.length-1);e.dth=e.sig.length;e.avl=gtAvl(e);e.frv=freeVars(e.tr)}if(e.lin.length!=3||e.lin[1]!="-"){throw r+'There is a problem with line citation. The rule must be applied to one subproof (citation of the form "j-k").'}var n=e.lin[0],i=e.lin[2];if(PROOF[n-1].rul!="Flag"){throw r+"The first rule line must be a Flag line."}if(!same(PROOF[n-1].sig,PROOF[i-1].sig)){throw r+"The two rule lines must be in the same subproof."}var l=lastline(PROOF[n-1].sig);if(l!=i){throw r+"The second rule line must be the last line of the subproof beginning with the Flag line "+n+"."}if(e.tr.length!=2||!isQ(e.tr[0])||e.tr[0][1]!="A"){throw r+"The formula being derived must be universally quantified."}var a=isInst(e.tr,PROOF[i-1].frm);if(a=="_"){throw r+"The formula that concludes the cited subproof is not an instance of the universal being derived."}if(a!=PROOF[n-1].frm){throw r+"The constant being generalized on must be the one flagged on the first rule line."}if(e.frv.indexOf(a)>=0){throw r+"Every occurrence of the term '"+a+"' in line "+i+" has to be replaced with the variable bound by the quantifier being introduced."}if(t==0){fillD(e,i)}if(!same(e.sig,PROOF[i-1].sig.slice(0,PROOF[i-1].sig.length-1))){throw r+"The subproof "+linD(e.lin)+" you are citing is not available at this stage in the proof."}}function ckAE(e,t){var r="[ERROR applying "+gRul(e.rul)+" to line "+e.lin[0]+"]: ";if(t==0){fillND(e)}if(e.lin.length!=1){throw r+"There is a problem with line citation. The rule must be applied to one line."}if(PROOF[e.lin[0]-1].tr.length!=2||!isQ(PROOF[e.lin[0]-1].tr[0])||PROOF[e.lin[0]-1].tr[0][1]!="A"){throw r+"The formula the rule is being applied to is not universally quantified."}var n=isInst(PROOF[e.lin[0]-1].tr,e.frm);if(n=="_"){throw r+"The formula being derived is not an instance of the universally quantified formula on line "+e.lin[0]+"."}var i=areAvl(e.lin,e.avl);if(i>=0){throw r+"Rule line "+i+" is not available at this stage of the proof.  The following lines are available: "+e.avl.join(",")}}function ckEI(e,t){var r="[ERROR applying "+gRul(e.rul)+" to line "+e.lin[0]+"]: ";if(t==0){fillND(e)}if(e.lin.length!=1){throw r+"There is a problem with line citation. The rule should be applied to one line."}if(e.tr.length!=2||!isQ(e.tr[0])||e.tr[0][1]!="E"){throw r+"The formula being derived is not existentially quantified."}var n=isInst(e.tr,PROOF[e.lin[0]-1].frm);if(n=="_"){throw r+"The formula on line "+e.lin[0]+" is not an instance of the formula being derived."}var i=areAvl(e.lin,e.avl);if(i>=0){throw r+"Rule line "+i+" is not available at this stage of the proof.  The following lines are available: "+e.avl.join(",")}}function ckEE(e,t){var r="[ERROR applying "+gRul(e.rul)+" to lines "+linD(e.lin)+"]: ";if(e.lin.length!=4||e.lin[2]!="-"){throw r+'There is a problem with line citation.  The rule must be applied to one line and one subproof (citation of the form "j-k").'}var n=e.lin[0],i=e.lin[1],l=e.lin[3];if(PROOF[n-1].tr.length!=2||!isQ(PROOF[n-1].tr[0])||PROOF[n-1].tr[0][1]!="E"){throw r+"The formula on the first rule line must be an existentially quantified formula."}var a=isInst(PROOF[n-1].tr,PROOF[i-1].frm);if(PROOF[i-1].rul!="Assumption"||a=="_"){throw r+"The second rule line is either not an assumption, or not an instance of the existential formula on the first rule line."}if(!same(PROOF[i-1].sig,PROOF[l-1].sig)){throw r+"The second and third rule lines must be in the same subproof."}var o=lastline(PROOF[i-1].sig);if(o!=l){throw r+"The third rule line must be the last line of the subproof beginning with the assumption line "+i+"."}if(PROOF[l-1].frm!=e.frm){throw r+"The formula being derived must match the formula on the third rule line."}if(t==0){fillD(e,l)}if(e.frv.indexOf(a)>=0){throw r+"The term '"+a+"' introduced in the assumption cannot occur in the formula being derived."}var s=frvList(PROOF[i-1].avl);if(s.indexOf(a)>=0){throw r+"Flagging violation.  The term '"+a+"' introduced in the assumption already occurs in a line available to that assumption."}if(!same(e.sig,PROOF[l-1].sig.slice(0,PROOF[l-1].sig.length-1))){throw r+"The subproof you are citing is not available at this stage in the proof."}}function ckIDI(e,t){var r="[ERROR applying "+gRul(e.rul)+"]: ";if(e.lin.length!=0){throw r+"There is a problem with line citation. This rule should not be applied to any lines."}if(e.tr.length!=3||e.tr[1]!="="||e.tr[0]!=e.tr[2]){throw r+"The formula entered is not of the form 't=t'."}if(!PROOF.length){e.sig=[e.cnt]}else{e.sig=PROOF[e.cnt-2].sig.slice(0)}e.dth=e.sig.length;e.avl=gtAvl(e);e.frv=freeVars(e.tr)}function ckIDE(e,t){var r="[ERROR applying "+gRul(e.rul)+" to lines "+e.lin.join(",")+"]: ";if(t==0){fillND(e)}if(e.lin.length!=2){throw r+"There is a problem with line citation. The rule must be applied to two lines."}if(PROOF[e.lin[0]-1].tr.length!=3||PROOF[e.lin[0]-1].tr[1]!="="){throw r+"The first rule line needs to be an identity."}if(!checkID(PROOF[e.lin[0]-1].tr,PROOF[e.lin[1]-1].tr,e.frm)){throw r+"The formula being derived does not follow by =E."}x=areAvl(e.lin,e.avl);if(x>=0){throw r+"Rule line "+x+" is not available at this stage of the proof.  The following lines are available: "+e.avl.join(",")}}function ckQS(e,t){var r="[ERROR applying SI(QS) to line "+e.lin[0]+"]: ";if(t==0){fillND(e)}if(e.lin.length!=1){throw r+"There is a problem with line citation. The rule must be applied to one line."}var n=e.lin[0]-1;if(e.tr.length!=2||e.tr[1].length!=2||PROOF[n].tr.length!=2||PROOF[n].tr[1].length!=2){u()}if(isU(PROOF[n].tr[0])&&isQ(PROOF[n].tr[1][0])){var i=unparse(PROOF[n].tr[1][1]);var l=PROOF[n].tr[1][0];var o=h(l);var s=o+"~"+i;if(e.frm!=s){u()}}else if(isQ(PROOF[n].tr[0])&&isU(PROOF[n].tr[1][0])){var i=unparse(PROOF[n].tr[1][1]);var l=PROOF[n].tr[0];var o=h(l);var s="~"+o+i;if(e.frm!=s){u()}}else{u()}var f=areAvl(e,a);f=areAvl(e.lin,e.avl);if(f>=0){throw r+"Rule line "+f+" is not available at this stage of the proof.  The following lines are available: "+e.avl.join(",")}function u(){throw r+"The formula being derived does not follow by SI(QS)."}function h(e){var t={A:"E",E:"A"};return t[e[0]]+e[1]}}function ckAV(e,t){var r="[ERROR applying SI(AV) to line "+e.lin[0]+"]: ";if(t==0){fillND(e)}if(e.lin.length!=1){throw r+"There is a problem with line citation. The rule must be applied to one line."}if(!isAV(PROOF[e.lin[0]-1].tr,PROOF[e.lin[0]-1].frm,e.frm)){throw r+"The formula being derived is not a single variable alphabetic variant of the formula on line "+e.lin[0]+"."}x=areAvl(e.lin,e.avl);if(x>=0){throw r+"Rule line "+x+" is not available at this stage of the proof.  The following lines are available: "+e.avl.join(",")}}function ckSI(e,t){var r="[ERROR applying "+gRul(e.rul)+" to line(s) "+e.lin.join(",")+"]: ";if(t==0){fillND(e)}if(e.lin.length!=e.seq.length-1){throw r+"The rule is being applied to an inappropriate number of lines."}if(e.seq.length==1){var n=match(parse(e.seq[0]),e.tr);if(!n[0]){a()}if(clash(n[1])){a()}}if(e.seq.length==2){var n=match(parse(e.seq[0]),PROOF[e.lin[0]-1].tr);if(!n[0]){a()}var i=match(parse(e.seq[1]),e.tr);if(!i[0]){a()}if(clash(n[1].concat(i[1]))){a()}}if(e.seq.length==3){var n=match(parse(e.seq[0]),PROOF[e.lin[0]-1].tr);if(!n[0]){a()}var i=match(parse(e.seq[1]),PROOF[e.lin[1]-1].tr);if(!i[0]){a()}var l=match(parse(e.seq[2]),e.tr);if(!l[0]){a()}if(clash(n[1].concat(i[1],l[1]))){a()}}n=areAvl(e.lin,e.avl);if(n>=0){throw r+"Rule line "+n+" is not available at this stage of the proof.  The following lines are available: "+e.avl.join(",")}function a(){throw r+"The formula being derived does not follow by "+gRul(e.rul)+"."}}function getSeq(e){var t="";var r=0;if(e.indexOf(":")<0){return[]}while(e[r]!=":"){r++}t=e.substr(r+1);t=t.replace(/ /g,"");return t.split(",")}function getSeqHead(e){var t="";var r=0;if(e.indexOf(":")<0){return e}while(e[r]!=":"){r++}return e.substr(0,r)}function match(e,t){var r=["A","B","C"];var n=[];function i(e,t){for(var l=0;l<e.length;l++){if(e[l]instanceof Array&&t[l]instanceof Array){if(!i(e[l],t[l])){return false}}else if(r.indexOf(e[l])>=0){n.push([r[r.indexOf(e[l])],unparse(t)])}else if(e[l]!=t[l]){return false}}return true}var l=i(e,t);if(l){l=!clash(n)}return l?[l,n]:[l,[]]}function clash(e){var t=e[0];e=e.slice(1);if(e.length==0){return false}for(var r=0;r<e.length;r++){if(e[r][0]==t[0]&&e[r][1]!=t[1]){return true}}return clash(e)}function disp(e){var t=["appm","expm","refm"];var r=["prbt","appt","expt","reft"];var n=PROOF.length>0||CONCLUSION.length>0;for(var i=0;i<t.length;i++){document.getElementById(t[i]).style.backgroundColor="#DDDDDD"}for(var i=0;i<r.length;i++){document.getElementById(r[i]).style.display="none"}var l=e=="app"&&!n?"prbt":e+"t";document.getElementById(l).style.display="block";document.getElementById(e+"m").style.backgroundColor="white"}function show(e){var t=document.getElementById(e);

var r=t.options[t.selectedIndex].value;var n=d3.selectAll(".dth").style("display","none");var i=d3.selectAll(".siti").style("display","none");var l=d3.selectAll(".lin").style("display","none");if(r=="Assumption"){document.getElementById("lin").value="";n.style("display","inline");var a=document.getElementById("dth");a.focus();a.value="Plus 1"}else if(r=="SI/TI"){i.style("display","inline");l.style("display","inline");document.getElementById("siti").focus()}else if(r!="--Select--"&&r!="Flag"&&r!="=I"){l.style("display","inline");document.getElementById("lin").focus()}}function exp(e){var t=document.getElementById(e);var r=document.getElementById(e+"trigger");var n={sync:"Syntax",srulc:"Rules for Sentential Logic",qrulc:"Rules for Quantificational Logic",exc:"Examples"};if(t.style.display=="none"||t.style.display==""){t.style.display="block";r.innerHTML="[–] "+n[e]}else{t.style.display="none";r.innerHTML="[+] "+n[e]}}function Line(e,t,r,n,i,l,a,o,s,f){this.cnt=e;this.frm=t;this.tr=r;this.rul=n;this.seq=i;this.lin=l;this.sig=a;this.dth=o;this.avl=s;this.frv=f}var PROOF=[];var CONCLUSION=[];var GOALS=[];function setup_proof(){var e=document.getElementById("premises").value.replace(/ /g,"");e=e==""?[]:e.split(",");var t=document.getElementById("conclusion").value.replace(/ /g,"");try{t=check_goal(t);CONCLUSION.push(t)}catch(r){clearall();return errmess([0],"ERROR: conclusion is not well formed.")}for(var n=0;n<e.length;n++){try{var i=new Line((n+1).toString(),e[n],parse(e[n]),"Premise",[],[]);validate_line(i);PROOF.push(i)}catch(r){clearall();return errmess([0],r)}}errmess([3],"");disp("app");draw_conclusion();draw()}function append_line(){var e=PROOF.length+1;var t=document.getElementById("frm").value.replace(/ /g,"");var r=parse(t);var n=document.getElementById("rul").value;var i=[];var l=document.getElementById("lin").value.replace(/ /g,"");if(n=="SI/TI"){n=document.getElementById("siti").value;i=getSeq(n);n=getSeqHead(n)}var l=new Line(e,t,r,n,i,l);if(l.rul=="Assumption"){l.sig=document.getElementById("dth").value=="Plus 1"?"+":"-"}try{validate_line(l)}catch(a){return errmess([0],a)}PROOF.push(l);clear_app();draw();checkifdone()}function validate_line(e){if(e.tr.length==0&&e.rul!="Flag"){e.frm="("+e.frm+")";e.tr=parse(e.frm)}ckSyn(e);e.lin=linArr(e.lin);ckRest(e,0)}function clrlast(){if(PROOF.length==0||PROOF[PROOF.length-1].rul=="Premise"){return errmess([0],"ERROR: No lines to delete.")}else{PROOF.pop();draw()}errmess([1],"")}function clear_app(){document.getElementById("dth").value="Plus 1";document.getElementById("frm").value="";document.getElementById("rul").value="--Select--";document.getElementById("lin").value="";show("rul")}function clear_gfrm(){document.getElementById("gfrm").value=""}function check_goal(e){var t=parse(e);if(t.length==0){e="("+e+")";t=parse(e);if(t.length==0){throw"ERROR: goal formula is not well formed."}}return e}function insert_goal(){var e=document.getElementById("gfrm").value.replace(/ /g,"");try{e=check_goal(e)}catch(t){return errmess([0],t)}GOALS.unshift(e);clear_gfrm();draw_goals()}function delete_goal(){if(!GOALS.length){errmess([0],"ERROR: No goals to delete.");return}else{GOALS.shift();draw_goals()}errmess([1],"")}function ckproof(e){var t="";if(PROOF.length==0){t="ERROR: No proof to check";return e==1?t:errmess([0],t)}for(var r=0;r<PROOF.length;r++){try{ckRest(PROOF[r],1)}catch(n){t="ERROR: There is a problem with proof line "+(r+1)+".  The error message concerning it is:<br /><br />"+n;return e==1?t:errmess([0,r+1],t)}}var i=PROOF[PROOF.length-1];for(var r=0;r<i.sig.length;r++){if(i.sig[r]!=1){t="WARNING: proof is incomplete.  The final line of your proof depends on line "+i.sig[r]+", which is not a Premise!";return e==1?t:errmess([0],t)}}if(i.frm!=CONCLUSION[0]){t="WARNING: proof is incomplete.  The final line of your proof does not match the conclusion "+CONCLUSION[0]+" you are aiming for.";return e==1?t:errmess([0],t)}t="Proof checks out!";return e==1?t:errmess([2],t)}function export_proof(){if(PROOF.length==0){return errmess([0],"No proof to export.")}var e=document.getElementById("plain").checked;var t=document.getElementById("pretty").checked;var r=document.getElementById("latex").checked;var n=PROOF.map(function(e){return e.cnt.toString()});var i=t?PROOF.map(function(e){return padBCs(richardify(e.frm))}):PROOF.map(function(e){return padBCs(e.frm)});i=r?PROOF.map(function(e){return latexify(richardify(e.frm))}):i;var l=t?padBCs(richardify(CONCLUSION[0])):padBCs(CONCLUSION[0]);l=r?latexify(richardify(CONCLUSION[0])):l;var a="";var o=PROOF.map(function(e){return linD(e.lin)});var s=t||r?PROOF.map(function(e){return gRul(e.rul)}):PROOF.map(function(e){return e.rul});var f=r?m("\\fa ","\\fh "):m("| ","|_");var u="";if(e||t){var a=a+"Problem: ";var h=PROOF.filter(function(e){return e.rul=="Premise"});for(var c=0;c<h.length;c++){a=c==h.length-1?a+i[c]:a+i[c]+", "}a=a+" ⊢ "+l+"\r\n\r\n";i=v(f,i,"  ");var g=max(n)+2;var O=max(i)+4;for(var c=0;c<PROOF.length;c++){if(o[c].length==0){u+=n[c]+d(g-n[c].length)+i[c]+d(O-i[c].length)+s[c]+"\r\n"}else{u+=n[c]+d(g-n[c].length)+i[c]+d(O-i[c].length)+o[c]+"  "+s[c]+"\r\n"}}}if(r){a=a+"%NOTE: requires \\usepackage{fitch}\r\n\\noindent Problem: $";var h=PROOF.filter(function(e){return e.rul=="Premise"});for(var c=0;c<h.length;c++){a=c==h.length-1?a+i[c]:a+i[c]+", "}a=a+" \\vdash "+l+"$\\\\\r\n\r\n";u="\\noindent\\begin{fitch}\r\n";i=v(f,i,"");s=s.map(p);for(var c=0;c<PROOF.length;c++){if(o[c].length==0){u+=i[c]+" & "+s[c]+"\\\\\r\n"}else{u+=i[c]+" & "+o[c]+"  "+s[c]+"\\\\\r\n"}}u=u+"\\end{fitch}"}document.getElementById("importarea").value=a+u;function m(e,t){var r=[];for(var n=0;n<PROOF.length;n++){var i="";for(var l=0;l<PROOF[n].dth;l++){if(l!=PROOF[n].dth-1){i=i+e}else{i=n==s.lastIndexOf("Premise")||s[n]=="Assumption"||s[n]=="Flag"?i+t:i+e}}r.push(i)}return r}function d(e){var t="";for(var r=0;r<e;r++){t=t+" "}return t}function v(e,t,r){for(var n=0;n<e.length;n++){t[n]=e[n]+r+t[n]}return t}function p(e){var t="";var r="";for(var n=0;n<e.length;n++){r=utox(e[n]);if(r!=e[n]){r="$"+r+"$"}t+=r}return t}}function import_proof(){try{var e=extract_proof()}catch(t){return errmess([0],t)}var r=e[0];var n=e[1];clearall();CONCLUSION.push(n[1]);for(var i=0;i<r.length;i++){if(r[i].rul=="Premise"&&n[0].indexOf(r[i].frm)<0){return errmess([0],"ERROR: Your proof contains the following formula as a premise on line "+(i+1)+": "+r[i].frm+". This is not among the premises in the problem you entered.  Problem is:<br/>"+n[0].join(",")+" ⊢ "+n[1])}try{validate_line(r[i])}catch(t){PROOF=[];PROOF=r.slice(0,i);draw_conclusion();draw();return errmess([0],"ERROR: There is a problem with line "+(i+1)+" in the proof you are attempting to import.  The error message concerning it is:<br><br>"+t+"<br><br>The portion of the proof that was successfully validated is to the left.")}PROOF.push(r[i])}if(r[r.length-1].frm!=n[1]){errmess([0],"Proof successfully imported.  WARNING: the last line of the proof does not match the conclusion in the problem line.")}else{errmess([2],"Proof successfully imported. Proof is complete!")}document.getElementById("importarea").value='Paste a previously exported proof (in plain notation) here and import it by clicking the button. NOTE: you can edit a proof here, but you need to be careful about formatting.  E.g. make sure the proof begins with a "Problem: " line, that formulas contain outermost parentheses, and that there are at least two spaces separating each "column" of the proof, with no double spaces elsewhere.';draw_conclusion();draw()}function extract_proof(){var e=document.getElementById("importarea").value;if(e.indexOf("Paste a previously")==0){throw"ERROR: paste a proof into the textarea first."}var t=[];var r=d(e);var n=[];var i=0;var l="";var a=[];var o="";var s=[];var f="";var u=0;while(r[0].indexOf("Problem: ")!=0&&e.length!=0){e=r[1];r=d(e)}if(e.length==0){throw'ERROR: proofs must begin with a problem line.  Something like "Problem: (P>Q), P ⊢ Q"'}try{var h=get_problem(r[0])}catch(c){return errmess([0],c)}while(e.length!=0&&(r[0].length==0||r[0][0]!=" "&&!isInt(r[0][0]))){e=r[1];r=d(e)}if(e.length==0){return b()}r=d(e);while(r[0].length!=0){n=r[0].split("  ").filter(p);n=n.map(function(e){return e.replace(/ /g,"")});e=r[1];r=d(e);if(n.length==5){i=parseInt(n[0],10);l=n[2];a=parse(l);o=n[4];s=R(o);f=n[3];u=n[1].match(/\|/g).length}else{var l=0;for(var g=0;g<n.length;g++){var O=parse(n[g]);if(O.length>0&&O.length<4){l=g;break}}if(l==1){i=parseInt(n[0],10);u=0;l=n[1];a=parse(l);o=n[3];s=R(o);f=n[2]}else if(l==2){i=parseInt(n[0],10);u=n[1].match(/\|/g).length;l=n[2];a=parse(l);o=n[3];s=R(o);f=""}else if(n[3]=="Flag"){i=parseInt(n[0],10);u=n[1].match(/\|/g).length;l=n[2];a=[];o=n[3];s="";f=""}else{return b()}}var m=new Line(i,l,a,o,s,f,[],u);if(m.rul=="Assumption"){if(t.length>0){if(t[t.length-1].dth==m.dth){m.sig=["-"]}else{m.sig=["+"]}}else{m.sig=["+"]}}t.push(m)}return[t,h];function d(e){var t=e.indexOf("\n");if(t!=-1){return[e.substring(0,t),e.substring(t+1)]}else{return[e,""]}}function v(e){var t=["∨","∀","∃","→","↔","⊥"];for(var r=0;r<t.length;r++){if(e.indexOf(t[r])>=0){return true}}return false}function p(e){if(e.length==0){return false}hascontent=false;for(var t=0;t<e.length;t++){if(e[t]!=" "){hascontent=true}}return hascontent}function R(e){if(e.indexOf("SI")!=0){return[]}var t=document.getElementById("SI1").childNodes;for(var r=1;r<t.length;r++){if(r%2==0){continue}if(t[r].value.indexOf(e)==0){return getSeq(t[r].value)}}}function b(){throw"ERROR: Something is wrong with the formatting of the proof you entered."}}function get_problem(e){e=e.replace("Problem: ","");e=e.replace("⊢",",");e=e.replace(/ /g,"");e=e.split(",");e=e.filter(function(e){return e.length!=0});var t="";for(var r=0;r<e.length;r++){if(parse(e[r]).length==0){throw"ERROR: the following formula in the Problem line is ill-formed: "+e[r]+". Make sure outermost parentheses are included."}}return[e.slice(0,e.length-1),e[e.length-1]]}function clearall(){PROOF=[];GOALS=[];CONCLUSION=[];draw_conclusion();draw();draw_goals()}function checkifdone(){var e=PROOF[PROOF.length-1];if(e.frm==CONCLUSION[0]&&(e.sig.length==0||same(e.sig,[1]))){errmess([2],"Your proof is complete!  Ready to submit.");GOALS=[];draw_goals()}else{errmess([1],"")}}function errmess(e,t){var r=document.getElementById("errord");if(e[0]==0){r.style.border="solid 1px #FF0000";r.style.backgroundColor="#FF9999";r.innerHTML=t}else if(e[0]==1){r.style.border="solid 1px #B4BAEA";r.style.backgroundColor="#F0F4FF";r.innerHTML=t}else if(e[0]==2){r.style.border="solid 1px #87D51C";r.style.backgroundColor="#E3FFB8";r.innerHTML=t}document.getElementById("rul").value="--Select--";document.getElementById("lin").value="";document.getElementById("dth").value="Plus 1";show("rul")}function ckSyn(e){if(e.rul=="--Select--"){throw"ERROR: select a rule."}if(e.tr.length==0&&e.rul!="Flag"){throw"ERROR: Formula is malformed."}if(e.rul=="Flag"&&!isT(e.frm)){throw"ERROR: Flagged term is malformed."}var t=badchar(e.frm);if(t>=0){throw"ERROR: the formula you entered contains the unrecognized character '"+e.frm[t]+"'.  See the syntax guide under the Reference tab."}if(!cklin(e.lin)){throw"ERROR: Rule lines are malformed"}}function ckRest(e,t){var r=0;if((r=oob(e.lin,e.cnt))>0){throw"ERROR: Rule line "+r+" is out of bounds. Rules must be applied to preceding lines."}if(e.rul=="Premise"){return ckPR(e,t)}else if(e.rul=="Assumption"){return ckAS(e,t)}else if(e.rul=="Reit"){return ckRE(e,t)}else if(e.rul=="&I"){return ckCJI(e,t)}else if(e.rul=="&E"){return ckCJE(e,t)}else if(e.rul==">I"){return ckCNI(e,t)}else if(e.rul==">E"){return ckCNE(e,t)}else if(e.rul=="vI"){return ckDJI(e,t)}else if(e.rul=="vE"){return ckDJE(e,t)}else if(e.rul=="~I"){return ckNI(e,t)}else if(e.rul=="~E"){return ckNE(e,t)}else if(e.rul=="DN"){return ckDN(e,t)}else if(e.rul=="EFQ"){return ckEFQ(e,t)}else if(e.rul=="<>I"){return ckBCI(e,t)}else if(e.rul=="<>E"){return ckBCE(e,t)}else if(e.rul=="Flag"){return ckFLG(e,t)}else if(e.rul=="EI"){ckEI(e,t)}else if(e.rul=="EE"){ckEE(e,t)}else if(e.rul=="AI"){ckAI(e,t)}else if(e.rul=="AE"){ckAE(e,t)}else if(e.rul=="=I"){ckIDI(e,t)}else if(e.rul=="=E"){ckIDE(e,t)}else if(e.rul=="SI(QS)"){ckQS(e,t)}else if(e.rul=="SI(AV)"){ckAV(e,t)}else if(e.rul.indexOf("SI")==0){ckSI(e,t)}else{throw"ERROR: The rule "+e.rul+" you entered is not recognized."}}function oob(e,t){for(var r=0;r<e.length;r++){if(e[r]>=t){return e[r]}}return 0}function cklin(e){if(e.length==0){return true}var t=["0","1","2","3","4","5","6","7","8","9"];var r=0;var n="";for(var i=0;i<e.length;i++){n=e[i];if((r==0||r==1)&&t.indexOf(n)>=0){r=1}else if(r==1&&n=="-"){r=2}else if((r==2||r==3)&&t.indexOf(n)>=0){r=3}else if((r==1||r==3)&&n==","){r=0}else{r=4}}return r==1||r==3}function linArr(e){if(e==""){return[]}var t=e.split(","),r=[],n=[];for(var i=0;i<t.length;i++){if(t[i].indexOf("-")<0){n.push(parseInt(t[i]))}else{r=t[i].split("-");n.push(parseInt(r[0]));n.push("-");n.push(parseInt(r[1]))}}return n}function linD(e){var t="";for(var r=0;r<e.length;r++){if(e[r]=="-"){t+="-"}else{if(r==e.length-1){t+=e[r].toString()}else if(e[r+1]=="-"){t+=e[r].toString()}else{t+=e[r].toString()+","}}}return t}function sorted(e){return e.sort(function(e,t){return e-t})}function max(e){var t=0;for(var r=0;r<e.length;r++){if(e[r].length>t){t=e[r].length}}return t}function isInt(e){var t=["0","1","2","3","4","5","6","7","8","9"];for(var r=0;r<e.length;r++){if(t.indexOf(e[r])<0){return false}}return!(e.length==0)}function rmDup(e){return e.filter(function(t,r){return e.indexOf(t)==r})}function badchar(e){var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz()~&<>=#";for(var r=0;r<e.length;r++){if(t.indexOf(e[r])<0){return r}}return-1}